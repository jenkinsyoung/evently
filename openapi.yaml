openapi: 3.0.4
info:
  title: Evently
  version: 1.0.12
tags:
  - name: events
    description: Events operations
  - name: users
    description: Users operations
  - name: reviews
    description: Reviews operations
  - name: categories
    description: Categories operations
  - name: auth
    description: Auth operations
  - name: moderation
    description: Moderation operations
paths:

  /auth/register:
    post:
      tags:
        - auth
      summary: Регистрация пользователя
      description: Регистрация пользователя
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: Успешная регистрация — возвращает access и refresh токены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /auth/login:
    post:
      tags:
        - auth
      summary: Вход в аккаунт
      description: Вход в аккаунт
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Успешный вход — возвращает access и refresh токены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /auth/refresh:
    post:
      tags:
        - auth
      summary: Обновление токенов
      description: Обновление токенов по предоставленному refresh-токену
      operationId: refreshTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
        required: true
      responses:
        '200':
          description: Успешное обновление — возвращает access и refresh токены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /api/events:
    post:
      tags:
        - events
      summary: Добавление мероприятия
      description: Добавление нового мероприятия
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        # default:
        #   description: Unexpected error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: "#/components/schemas/Error"
    get:
      tags:
        - events
      summary: Получить все мероприятия
      description: Возвращает все мероприятия
      operationId: getAllEvents
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID
        '404':
          description: Events not found


  /api/events/{eventID}:
    get:
      tags:
        - events
      summary: Найти мероприятие по UUID
      description: Возвращает одно мероприятие
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: getEventByUUID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID
        '404':
          description: Event not found



    put:
      tags:
        - events
      summary: Обновление мероприятия
      description: Обновление мероприятия по ID
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: updateEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID
        '404':
          description: Event not found
        '422':
          description: Validation exception
        # default:
        #   description: Unexpected error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: "#/components/schemas/Error"

    delete:
      tags:
        - events
      summary: Удалить мероприятие по UUID
      description: Удаляет одно мероприятие
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: deleteEvent
      responses:
        '204':
          description: Successful operation
          content: {}
        '400':
          description: Invalid ID
        '404':
          description: Event not found


  /api/events/{eventID}/participants:
    get:
      tags:
        - events
      summary: Получить всех участников мероприятия
      description: Возвращает всех участников
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: getParticipantsForEvent
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID
        '404':
          description: Event not found

  /api/events/{eventID}/attendance:
    post:
      tags:

        - events
      summary: Зарегистрироваться на мероприятие
      description: Пользователь регистрируется на мероприятие
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: registerUserForEvent
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Invalid ID
        '404':
          description: Event not found


    delete:
      tags:
        - events
      summary: Отменить участие в мероприятии
      description: Пользователь отменяет участие в мероприятии
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: deleteUserFromEvent
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Invalid ID
        '404':
          description: Event not found


  /api/users/me/created-events:
    get:
      tags:
        - users
      summary: Получить мероприятия, созданные пользователем
      description: Возвращает все мероприятия, созданные пользователя
      operationId: getCreatedEventsForUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID
        '404':
          description: Event not found

  /api/users/me/attended-events:
    get:
      tags:
        - users
      summary: Получить мероприятия, в которых участвует пользователь
      description: Возвращает все мероприятия, в которых участвует пользователь
      operationId: getAttendedEventsForUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID
        '404':
          description: Event not found



  /api/users/me:
    get:
      tags:
        - users
      summary: Получить профиль текущего пользователя
      description: Возвращает профиль текущего пользователя
      operationId: getMyProfile
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID
        '404':
          description: User not found

    put:
      tags:
        - users
      summary: Изменение профиля текущего пользователя
      description: Изменение профиля текущего пользователя
      operationId: updateMyProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

    delete:
      tags:
        - users
      summary: Удалить мой аккаунт
      description: Удаляет аккаунт текущего пользователя
      operationId: deleteMyProfile
      responses:
        '204':
          description: Successful operation
          content: {}
        '400':
          description: Invalid ID
        '404':
          description: User not found




  /api/events/{eventID}/reviews:
    post:
      tags:
        - reviews
      summary: Добавление отзыва
      description: Добавление нового отзыва
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: createReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - reviews
      summary: Получить все отзывы к мероприятию
      description: Возвращает все отзывы к мероприятию
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: getAllReviewsForEvent
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Invalid ID
        '404':
          description: Event not found

  /api/categories:
    get:
      tags:
        - categories
      summary: Получить все категории
      description: Возвращает все категории
      operationId: getAllCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID
        '404':
          description: Events not found


  /api/categories/{categoryID}:
    get:
      tags:
        - categories
      summary: Получить категорию по UUID
      description: Возвращает категорию по UUID
      parameters:
        - name: categoryID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: getCategoryByUUID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID
        '404':
          description: Category not found


  /api/moderation/categories:
    post:
      tags:
        - moderation
      summary: Добавление категории
      description: Добавление новой категории
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /api/moderation/categories/{categoryID}:
    put:
      tags:
        - moderation
      summary: Обновление категории
      description: Обновление категории по ID
      parameters:
        - name: categoryID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: updateCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID
        '404':
          description: Category not found
        '422':
          description: Validation exception

    delete:
      tags:
        - moderation
      summary: Удалить категорию по UUID
      description: Удаляет одну категорию
      parameters:
        - name: categoryID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: deleteCategory
      responses:
        '204':
          description: Successful operation
          content: {}
        '400':
          description: Invalid ID
        '404':
          description: Category not found

  /api/moderation/events/{eventID}:
    patch:
      tags:
        - moderation
      summary: Проверить объявление
      description: Проверка объявления
      parameters:
        - name: eventID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - 'Одобрено'
                    - 'На модерации'
                    - 'Отклонено'
              required:
                - status
      responses:
        '200':
          description: Succesfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID

  /api/moderation/users:
    post:
      tags:
        - moderation
      summary: Создание пользователя модератором
      description: Модератор создаёт нового пользователя
      operationId: moderationCreateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '422':
          description: Validation exception


  /api/moderation/users/{userID}:
    get:
      tags:
        - moderation
      summary: Получить пользователя
      description: Возвращает пользователя
      parameters:
        - name: userID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: getUserByID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID
        '404':
          description: User not found

    put:
      tags:
        - moderation
      summary: Обновление пользователя модератором
      description: Модератор обновляет данные пользователя
      parameters:
        - name: userID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: moderationUpdateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Пользователь успешно обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '422':
          description: Validation exception

    delete:
      tags:
        - moderation
      summary: Удалить пользователя по UUID
      description: Удаляет пользователя
      parameters:
        - name: userID
          in: path
          required: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      operationId: deleteUser
      responses:
        '204':
          description: Successful operation
          content: {}
        '400':
          description: Invalid ID
        '404':
          description: User not found


components:
  schemas:
    Event:
      type: object
      properties:
        event_id:
          type: string
          format: uuid
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
        event_title:
          type: string
          example: Карнавал
        description:
          type: string
          example: Очень крутое мероприятие
        start_date:
          description: Дата и время начала
          type: string
          example: 2025-04-10T16:45:00.000Z
        end_date:
          description: Дата и время окончания
          type: string
          example: 2025-04-10T16:45:00.000Z
          nullable: true

        creator:
          $ref: '#/components/schemas/User'
        location:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        participant_count:
          description: Количество участников
          type: integer
          example: 10
          nullable: true
        image_urls:
          type: array
          items:
            type: string
          example:
            - https://example.com/image1.jpg
            - https://example.com/image2.jpg
        event_status:
          type: string
        created_at:
          description: Дата и время окончания
          type: string
          example: 2025-04-10T16:45:00.000Z
          nullable: true


    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        nickname:
          type: string
        phone:
          type: string
        profile_pic_url:
          type: string
        user_role:
          type: string
          enum:
            - 'ADMIN'
            - 'USER'

    Review:
      type: object
      properties:
        review_id:
          type: string
          format: uuid
        event:
          $ref: '#/components/schemas/Event'
        user:
          $ref: '#/components/schemas/User'
        description:
          type: string
          example: "Прекрасное меропориятие, мне оч понравилось"
        score:
          type: number
          format: float
        created_at:
          description: Дата и время окончания
          type: string
          example: 2025-04-10T16:45:00.000Z

    Category:
      type: object
      properties:
        category_id:
          type: string
          format: uuid
        category_name:
          type: string
          example: "Спорт"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        nickname:
          type: string
      required:
        - email
        - password
        - nickname

    Tokens:
      type: object
      properties:
        access_token:
          type: string
          description: JWT для доступа к защищённым ресурсам
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        refresh_token:
          type: string
          description: Токен для получения нового accessToken
          example: d1f3b4c5-6a7b-8c9d-0e1f-2a3b4c5d6e7f
      required:
        - access_token
        - refresh_token

    RefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token






  